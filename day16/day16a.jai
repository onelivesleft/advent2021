#import "Basic";
#import "Strings";
#load "../utils.jai";

confirm_test :: x;  // x / _


bits : [..] bool;
view : [] bool;

version_total := 0;


main :: () {
    #if confirm_test  data :: input;
    else              data :: dummy;

    for line: line_split(data)
        parse(line);
}


parse :: (line: string) {
    array_reset(*bits);

    for split(line) {
        i := it - #char "0";
        if i >= 10  i -= (#char "A" - #char "0" - 10) ;

        array_add(*bits, i >= 8);
        array_add(*bits, (i % 8) >= 4);
        array_add(*bits, (i % 4) >= 2);
        array_add(*bits, i % 2 >= 1);
    }

    view = bits;

    bite :: (count: int) -> int {
        assert(view.count >= count);
        result := 0;
        for 1 .. count {
            result *= 2;
            if view[0]  result += 1;
            view.data +=1; view.count -= 1;
        }
        return result;
    }

    bite_packet :: () {
        version := bite(3);
        version_total += version;

        type_id := bite(3);
        if type_id == {
            case 4; // literal
            repeat := bite(1);
            value := bite(4);
            while view.count >= 4 && repeat {
                repeat = bite(1);
                value <<= 4;
                value += bite(4);
            }

            case;
            length_type_id := bite(1);
            if length_type_id == {
                case 0;
                length := bite(15);
                desired_count := view.count - length;
                while view.count > desired_count
                    bite_packet();

                case 1;
                packet_count := bite(11);
                for 1 .. packet_count
                    bite_packet();
            }
        }
    }

    version_total = 0;
    bite_packet();
    print("\n%:\n %\n", line, version_total);
}

dummy :: #string __data
D2FE28
38006F45291200
EE00D40C823060
8A004A801A8002F478
620080001611562C8802118E34
C0015000016115A2E0802F182340
A0016C880162017C3686B18A3D4780
__data

input :: #string __data

__data
